// celengan-api/controllers/transactionController.js
const pool = require('../config/db');
const axios = require('axios');
const crypto = require('crypto'); // Untuk generate ID unik internal
const { confirmTargetDeposit } = require('../services/paymentService'); // Impor service

// Fungsi makeManualDeposit yang sudah ada bisa dimodifikasi untuk menggunakan service juga
// @desc    Make a manual deposit to a target (misalnya transfer bank manual yang dikonfirmasi admin)
// @route   POST /api/transactions/deposit-manual (ubah rute agar beda dengan QRIS)
// @access  Private
const makeManualDeposit = async (req, res) => {
    const { target_id, jumlah, deskripsi } = req.body;
    const user_id = req.user.id;

    if (!target_id || !jumlah || parseFloat(jumlah) <= 0) {
        return res.status(400).json({ message: 'Target ID dan jumlah deposit (positif) diperlukan' });
    }

    try {
        const paymentRef = `MANUAL-${crypto.randomBytes(8).toString('hex')}`;
        const result = await confirmTargetDeposit(user_id, target_id, jumlah, deskripsi || 'Manual deposit', paymentRef);
        res.status(201).json(result);
    } catch (error) {
        console.error("Error pada makeManualDeposit:", error);
        res.status(500).json({ message: error.message || 'Server error processing manual deposit' });
    }
};


// --- Fungsi Baru untuk QRIS ---

// @desc    Initiate QRIS payment
// @route   POST /api/transactions/qris/initiate
// @access  Private
const initiateQrisPayment = async (req, res) => {
    const { target_id, amount } = req.body;
    const user_id = req.user.id;

    if (!target_id || !amount || parseFloat(amount) <= 0) {
        return res.status(400).json({ message: 'Target ID dan jumlah pembayaran (positif) diperlukan.' });
    }

    const ourTransactionRef = `QRIS-${user_id}-${target_id}-${Date.now()}-${crypto.randomBytes(4).toString('hex')}`;
    const panzngenApiKey = process.env.PANZNGEN_API_KEY;
    const panzngenBaseUrl = process.env.PANZNGEN_API_BASE_URL;
    // Ambil codeqr dari request body jika dinamis, atau gunakan default dari .env
    const codeqr = req.body.codeqr || process.env.PANZNGEN_DEFAULT_CODEQR;


    if (!panzngenApiKey || !panzngenBaseUrl) {
        console.error("Konfigurasi PanzNGen API tidak lengkap di .env");
        return res.status(500).json({ message: "Layanan pembayaran tidak terkonfigurasi dengan benar." });
    }

    try {
        // 1. Panggil API PanzNGen untuk membuat pembayaran
        const createPaymentUrl = `${panzngenBaseUrl}/createpayment`;
        console.log(`Calling PanzNGen createPayment: URL=${createPaymentUrl}, APIKey=${panzngenApiKey}, Amount=${amount}, CodeQR=${codeqr}`);

        const panzngenResponse = await axios.get(createPaymentUrl, {
            params: {
                apikey: panzngenApiKey,
                amount: parseFloat(amount),
                codeqr: codeqr, // Pastikan parameter ini sesuai kebutuhan PanzNGen
            }
        });

        console.log("PanzNGen createPayment response:", panzngenResponse.data);

        // Asumsi respons PanzNGen: { success: true, data: { keyorkut: "...", qr_string: "..." } } atau error
        if (!panzngenResponse.data || !panzngenResponse.data.success || !panzngenResponse.data.data || !panzngenResponse.data.data.keyorkut) {
            throw new Error(panzngenResponse.data.message || 'Gagal membuat pembayaran QRIS di PanzNGen.');
        }

        const { keyorkut, qr_string } = panzngenResponse.data.data; // Sesuaikan dengan struktur respons PanzNGen

        // 2. Simpan percobaan pembayaran ke database kita
        await pool.query(
            'INSERT INTO qris_payment_attempts (user_id, target_id, amount, panzngen_keyorkut, panzngen_payment_data, status, our_transaction_ref) VALUES (?, ?, ?, ?, ?, ?, ?)',
            [user_id, target_id, parseFloat(amount), keyorkut, qr_string || JSON.stringify(panzngenResponse.data.data), 'PENDING', ourTransactionRef]
        );

        // 3. Kembalikan data QR dan ID referensi kita ke frontend
        res.status(201).json({
            message: 'Permintaan pembayaran QRIS berhasil dibuat. Silakan selesaikan pembayaran.',
            ourTransactionRef: ourTransactionRef,
            keyorkut: keyorkut, // ID dari PanzNGen, mungkin dibutuhkan frontend untuk cek status
            qrData: qr_string, // Data QR untuk ditampilkan di frontend
            paymentDetails: panzngenResponse.data.data // Kirim semua detail jika perlu
        });

    } catch (error) {
        console.error('Error saat inisiasi pembayaran QRIS:', error.response ? error.response.data : error.message);
        const errorMessage = error.response && error.response.data && error.response.data.message
                           ? error.response.data.message
                           : error.message || 'Gagal memproses permintaan pembayaran QRIS.';
        res.status(500).json({ message: errorMessage });
    }
};

// @desc    Check QRIS payment status
// @route   GET /api/transactions/qris/status/:ourTransactionRef
// @access  Private
const checkQrisPaymentStatus = async (req, res) => {
    const { ourTransactionRef } = req.params;
    const user_id = req.user.id; // Untuk memastikan user hanya bisa cek transaksinya sendiri

    const panzngenApiKey = process.env.PANZNGEN_API_KEY;
    const panzngenBaseUrl = process.env.PANZNGEN_API_BASE_URL;
    const panzngenMerchantId = process.env.PANZNGEN_MERCHANT_ID; // Ambil dari .env

    if (!panzngenApiKey || !panzngenBaseUrl || !panzngenMerchantId) {
        console.error("Konfigurasi PanzNGen API tidak lengkap di .env untuk cek status");
        return res.status(500).json({ message: "Layanan pengecekan status tidak terkonfigurasi." });
    }

    try {
        // 1. Ambil detail percobaan pembayaran dari database kita
        const [attempts] = await pool.query(
            'SELECT * FROM qris_payment_attempts WHERE our_transaction_ref = ? AND user_id = ?',
            [ourTransactionRef, user_id]
        );

        if (attempts.length === 0) {
            return res.status(404).json({ message: 'Referensi transaksi tidak ditemukan atau bukan milik Anda.' });
        }
        const attempt = attempts[0];

        // Jika sudah sukses atau gagal sebelumnya, langsung kembalikan status dari DB
        if (attempt.status === 'SUCCESS' || attempt.status === 'FAILED' || attempt.status === 'EXPIRED') {
            return res.json({
                message: `Status pembayaran adalah ${attempt.status}.`,
                status: attempt.status,
                ourTransactionRef: attempt.our_transaction_ref,
                amount: attempt.amount
            });
        }

        // 2. Panggil API PanzNGen untuk cek status menggunakan panzngen_keyorkut
        if (!attempt.panzngen_keyorkut) {
             return res.status(400).json({ message: 'Data pembayaran tidak lengkap (keyorkut hilang).' });
        }

        const checkStatusUrl = `${panzngenBaseUrl}/cekstatus`;
        console.log(`Calling PanzNGen cekStatus: URL=${checkStatusUrl}, APIKey=${panzngenApiKey}, Merchant=${panzngenMerchantId}, KeyOrkut=${attempt.panzngen_keyorkut}`);

        const statusResponse = await axios.get(checkStatusUrl, {
            params: {
                apikey: panzngenApiKey,
                merchant: panzngenMerchantId, // Pastikan parameter ini sesuai
                keyorkut: attempt.panzngen_keyorkut,
            }
        });
        
        console.log("PanzNGen cekStatus response:", statusResponse.data);

        // Asumsi respons: { success: true, data: { status: "SUCCESS" / "PENDING" / "FAILED", ... } }
        if (!statusResponse.data || !statusResponse.data.success || !statusResponse.data.data || !statusResponse.data.data.status) {
            throw new Error(statusResponse.data.message || 'Gagal memeriksa status pembayaran di PanzNGen.');
        }

        const paymentStatus = statusResponse.data.data.status.toUpperCase(); // Normalisasi ke uppercase

        // 3. Update status di database kita
        await pool.query(
            'UPDATE qris_payment_attempts SET status = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?',
            [paymentStatus, attempt.id]
        );

        // 4. Jika SUKSES, proses deposit ke target
        if (paymentStatus === 'SUCCESS') {
            // Panggil fungsi service untuk mencatat deposit ke target
            // Deskripsi bisa diambil dari data attempt atau dibuat generik
            const depositDescription = `QRIS Deposit ref: ${attempt.our_transaction_ref}`;
            await confirmTargetDeposit(attempt.user_id, attempt.target_id, attempt.amount, depositDescription, attempt.our_transaction_ref);
            
            return res.json({
                message: 'Pembayaran QRIS berhasil dan deposit telah dicatat!',
                status: paymentStatus,
                ourTransactionRef: attempt.our_transaction_ref,
                amount: attempt.amount
            });
        } else {
            // Jika PENDING, FAILED, EXPIRED, dll.
            return res.json({
                message: `Status pembayaran saat ini: ${paymentStatus}.`,
                status: paymentStatus,
                ourTransactionRef: attempt.our_transaction_ref
            });
        }

    } catch (error) {
        console.error('Error saat cek status pembayaran QRIS:', error.response ? error.response.data : error.message);
        const errorMessage = error.response && error.response.data && error.response.data.message
                           ? error.response.data.message
                           : error.message || 'Gagal memeriksa status pembayaran QRIS.';
        res.status(500).json({ message: errorMessage });
    }
};


module.exports = {
    makeManualDeposit, // Rute lama, mungkin diubah pathnya
    getUserTransactions, // Fungsi yang sudah ada
    initiateQrisPayment,
    checkQrisPaymentStatus,
};
